blueprint:
  name: "New York Times News — TTS per-speaker with pre-roll"
  description: >
    Speaks New York Times headlines by category via TTS, playing to your selected
    media players one-by-one with a configurable pre-roll (like your weather blueprint).
    Triggers automatically per-category when the Event entity "title" changes.
    Also supports an optional scheduled Roundup that reads all categories.
  domain: automation
  source_url: "https://github.com/zodyking/weather-forecast-alert-blueprint/blob/main/weather-forecast.yaml"

  input:
    # ---------- TTS / Speakers ----------
    tts_entity:
      name: "TTS Entity"
      description: "Select your TTS entity (e.g. tts.piper, tts.cloud)."
      selector:
        entity:
          domain: tts

    speakers:
      name: "Speakers (announce to, sequential)"
      description: "Media players to speak on, one-by-one, in the given order."
      selector:
        entity:
          domain: media_player
          multiple: true

    preroll_ms:
      name: "TTS pre-roll (milliseconds)"
      description: "Delay before speaking on each speaker to let it wake up, set volume, etc."
      default: 150
      selector:
        number:
          min: 0
          max: 3000
          step: 50
          unit_of_measurement: ms
          mode: slider

    volume_level:
      name: "Announcement volume"
      description: "Sets media player volume before each TTS (0.0–1.0)."
      default: 0.60
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    voice:
      name: "Voice (if supported by your TTS)"
      description: 'Voice ID (e.g., Piper "en_US-carlin-high"). Leave as-is if your TTS ignores it.'
      default: en_US-carlin-high
      selector:
        text: {}

    # ---------- NYT Event Entities ----------
    business_event:
      name: "Business event entity"
      description: 'NYT business Event entity (attribute "title" updates when a new item arrives).'
      default: event.nyt_business
      selector:
        entity:
          domain: event

    science_event:
      name: "Science event entity"
      description: 'NYT science Event entity (attribute "title" updates when a new item arrives).'
      default: event.nyt_science
      selector:
        entity:
          domain: event

    technology_event:
      name: "Technology event entity"
      description: 'NYT technology Event entity (attribute "title" updates when a new item arrives).'
      default: event.nyt_technology
      selector:
        entity:
          domain: event

    world_event:
      name: "World news event entity"
      description: 'NYT world news Event entity (attribute "title" updates when a new item arrives).'
      default: event.nyt_world_news
      selector:
        entity:
          domain: event

    sports_event:
      name: "Sports event entity (optional)"
      description: "Optional; if not available it will be skipped in roundups."
      default: event.nyt_sports
      selector:
        entity:
          domain: event

    # ---------- Scheduled Roundup ----------
    enable_roundup_schedule:
      name: "Enable Roundup Schedule"
      description: "Toggle ON to speak a daily roundup at the time/days below."
      default: false
      selector:
        boolean: {}

    roundup_time:
      name: "Roundup time"
      description: "Time of day to speak the scheduled roundup (used when schedule is enabled)."
      default: "08:30:00"
      selector:
        time: {}

    roundup_weekdays:
      name: "Roundup days"
      description: "Days of week to speak the scheduled roundup."
      default:
        - Mon
        - Tue
        - Wed
        - Thu
        - Fri
        - Sat
        - Sun
      selector:
        select:
          multiple: true
          options:
            - Mon
            - Tue
            - Wed
            - Thu
            - Fri
            - Sat
            - Sun

mode: queued
max: 10

# ---------------------- TRIGGERS ----------------------
trigger:
  # Category update triggers (fire when the article "title" changes)
  - platform: state
    entity_id: !input business_event
    attribute: title
    id: business
  - platform: state
    entity_id: !input science_event
    attribute: title
    id: science
  - platform: state
    entity_id: !input technology_event
    attribute: title
    id: technology
  - platform: state
    entity_id: !input world_event
    attribute: title
    id: world
  - platform: state
    entity_id: !input sports_event
    attribute: title
    id: sports

  # Scheduled Roundup (time-of-day)
  - platform: time
    at: !input roundup_time
    id: roundup_time

condition: []

# Make !input values available inside templates safely
variables:
  _tts_entity: !input tts_entity
  _speakers: !input speakers
  _preroll_ms: !input preroll_ms
  _voice: !input voice
  _volume: !input volume_level

  e_business: !input business_event
  e_science: !input science_event
  e_technology: !input technology_event
  e_world: !input world_event
  e_sports: !input sports_event

  _roundup_enabled: !input enable_roundup_schedule
  _roundup_days: !input roundup_weekdays

# ---------------------- ACTIONS ----------------------
action:
  - choose:
      # ---------------- Single-category branches ----------------
      - conditions:
          - condition: trigger
            id: business
        sequence:
          - variables:
              news_msg: >-
                {% set t = (state_attr(e_business,'title') or states(e_business) or '') | trim %}
                {% set d = (state_attr(e_business,'description') or state_attr(e_business,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ news_msg }}"
                    options:
                      voice: "{{ _voice }}"

      - conditions:
          - condition: trigger
            id: science
        sequence:
          - variables:
              news_msg: >-
                {% set t = (state_attr(e_science,'title') or states(e_science) or '') | trim %}
                {% set d = (state_attr(e_science,'description') or state_attr(e_science,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ news_msg }}"
                    options:
                      voice: "{{ _voice }}"

      - conditions:
          - condition: trigger
            id: technology
        sequence:
          - variables:
              news_msg: >-
                {% set t = (state_attr(e_technology,'title') or states(e_technology) or '') | trim %}
                {% set d = (state_attr(e_technology,'description') or state_attr(e_technology,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ news_msg }}"
                    options:
                      voice: "{{ _voice }}"

      - conditions:
          - condition: trigger
            id: world
        sequence:
          - variables:
              news_msg: >-
                {% set t = (state_attr(e_world,'title') or states(e_world) or '') | trim %}
                {% set d = (state_attr(e_world,'description') or state_attr(e_world,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ news_msg }}"
                    options:
                      voice: "{{ _voice }}"

      - conditions:
          - condition: trigger
            id: sports
        sequence:
          - variables:
              news_msg: >-
                {% set t = (state_attr(e_sports,'title') or states(e_sports) or '') | trim %}
                {% set d = (state_attr(e_sports,'description') or state_attr(e_sports,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ news_msg }}"
                    options:
                      voice: "{{ _voice }}"

      # ---------------- Scheduled Roundup (time-of-day) ----------------
      - conditions:
          - condition: trigger
            id: roundup_time
        sequence:
          # Only proceed if schedule is enabled and today is selected
          - condition: template
            value_template: >-
              {% set days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'] %}
              {% set today = days[now().weekday()] %}
              {{ _roundup_enabled and (today in _roundup_days) }}

          - variables:
              roundup_text: >-
                {% set lines = [] %}

                {# Business #}
                {% set e = e_business %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In the world of business today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {# Science #}
                {% set e = e_science %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In science today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {# Sports (optional) #}
                {% set e = e_sports %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In sports today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {# Technology #}
                {% set e = e_technology %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In technology today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {# World #}
                {% set e = e_world %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In world news today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {{ lines | join('\n') }}

          - condition: template
            value_template: "{{ roundup_text | trim != '' }}"

          - variables:
              final_msg: "{{ roundup_text }}"

          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay:
                    milliseconds: "{{ _preroll_ms | int }}"
                - action: tts.speak
                  target:
                    entity_id: "{{ _tts_entity }}"
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options:
                      voice: "{{ _voice }}"
