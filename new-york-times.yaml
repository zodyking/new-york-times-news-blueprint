blueprint:
  name: "New York Times News — TTS per-speaker, pre-roll, AI optional"
  description: >
    Speaks New York Times headlines by category via TTS, one speaker at a time with pre-roll and volume set.
    Plays automatically when each NYT category Event updates its "title".
    Also supports an optional Roundup on a time_pattern schedule. Both per-category and roundup messages
    can be rewritten via an AI Task with prompts you control.
  domain: automation
  source_url: "https://github.com/zodyking/weather-forecast-alert-blueprint/blob/main/weather-forecast.yaml"

  input:
    # ---------- TTS / Speakers ----------
    tts_entity:
      name: "TTS Entity"
      description: "Select your TTS entity (e.g. tts.piper, tts.cloud)."
      selector:
        entity:
          domain: tts

    speakers:
      name: "Speakers (announce to, sequential)"
      description: "Media players to speak on, one-by-one, in the order listed."
      selector:
        entity:
          domain: media_player
          multiple: true

    preroll_ms:
      name: "TTS pre-roll (milliseconds)"
      description: "Delay before speaking on each speaker to let it wake, set volume, etc."
      default: 150
      selector:
        number:
          min: 0
          max: 3000
          step: 50
          unit_of_measurement: ms
          mode: slider

    volume_level:
      name: "Announcement volume"
      description: "Sets media player volume before each TTS (0.0–1.0)."
      default: 0.60
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    voice:
      name: "Voice (if supported by your TTS)"
      description: 'Voice ID (e.g., Piper "en_US-carlin-high"). Leave as-is if your TTS ignores it.'
      default: en_US-carlin-high
      selector:
        text: {}

    # ---------- NYT Event Entities ----------
    business_event:
      name: "Business event entity"
      description: 'NYT Business Event entity whose "title" changes on new items.'
      default: event.nyt_business
      selector:
        entity:
          domain: event

    science_event:
      name: "Science event entity"
      description: 'NYT Science Event entity whose "title" changes on new items.'
      default: event.nyt_science
      selector:
        entity:
          domain: event

    technology_event:
      name: "Technology event entity"
      description: 'NYT Technology Event entity whose "title" changes on new items.'
      default: event.nyt_technology
      selector:
        entity:
          domain: event

    world_event:
      name: "World news event entity"
      description: 'NYT World News Event entity whose "title" changes on new items.'
      default: event.nyt_world_news
      selector:
        entity:
          domain: event

    sports_event:
      name: "Sports event entity (optional)"
      description: "Optional; if not available it will be skipped in roundups."
      default: event.nyt_sports
      selector:
        entity:
          domain: event

    # ---------- AI Task (shared) ----------
    ai_task_entity:
      name: "AI Task entity"
      description: "Example entity id (e.g. ai_task.google_ai_task_2)."
      default: ai_task.google_ai_task_2
      selector:
        entity:
          domain: ai_task

    # ---------- AI rewrite: per-category ----------
    enable_ai_categories:
      name: "Rewrite per-category updates with AI"
      description: "Toggle ON to send each single-category item to AI before speaking."
      default: false
      selector:
        boolean: {}

    ai_prompt_categories:
      name: "AI prompt for per-category updates"
      description: "The instructions sent to the AI Task when a single category updates."
      default: >
        As a professional news anchor to an audience of one, rewrite the text crisply.
        Keep it short and factual. Use "!" where you would place commas to improve TTS prosody.
        Do not add intros or outros; return only the rewritten sentence.
        TEXT: "{{text}}"
      selector:
        text:
          multiline: true

    # ---------- AI rewrite: roundup ----------
    enable_roundup_ai:
      name: "Rewrite scheduled roundup with AI"
      description: "Toggle ON to send the compiled roundup to AI before speaking."
      default: true
      selector:
        boolean: {}

    ai_prompt_roundup:
      name: "AI prompt for roundup"
      description: "The instructions sent to the AI Task for scheduled roundups."
      default: >
        As a professional news anchor to an audience of one, summarize the roundup concisely.
        Structure into segments: Business, Science, Sports, Technology, World. Start each with
        a short intro like "In business today". Use "!" where commas would be natural, and
        between segments. Keep it tight and do not add an intro/outro.
        ROUNDUP: "{{text}}"
      selector:
        text:
          multiline: true

    # ---------- Scheduled Roundup (time_pattern) ----------
    enable_roundup_schedule:
      name: "Enable Roundup Schedule (time_pattern)"
      description: "Toggle ON to speak a roundup on the schedule below."
      default: false
      selector:
        boolean: {}

    roundup_pattern_hours:
      name: "Hours pattern"
      description: 'Time pattern for hours (e.g. "*", "*/2", "9-18").'
      default: "*"
      selector:
        text: {}

    roundup_pattern_minutes:
      name: "Minutes pattern"
      description: 'Time pattern for minutes (e.g. "0", "*/30").'
      default: "0"
      selector:
        text: {}

    roundup_pattern_seconds:
      name: "Seconds pattern"
      description: 'Time pattern for seconds (e.g. "0", "30", "*/10").'
      default: "0"
      selector:
        text: {}

mode: queued
max: 10

# ---------------------- TRIGGERS ----------------------
trigger:
  # Category update triggers (fire when the article "title" changes)
  - platform: state
    entity_id: !input business_event
    attribute: title
    id: business
  - platform: state
    entity_id: !input science_event
    attribute: title
    id: science
  - platform: state
    entity_id: !input technology_event
    attribute: title
    id: technology
  - platform: state
    entity_id: !input world_event
    attribute: title
    id: world
  - platform: state
    entity_id: !input sports_event
    attribute: title
    id: sports

  # Scheduled Roundup via time_pattern
  - platform: time_pattern
    hours: !input roundup_pattern_hours
    minutes: !input roundup_pattern_minutes
    seconds: !input roundup_pattern_seconds
    id: roundup_pattern

condition: []

# ---------------------- VARIABLES (expose !input to templates) ----------------------
variables:
  _tts_entity: !input tts_entity
  _speakers: !input speakers
  _preroll_ms: !input preroll_ms
  _voice: !input voice
  _volume: !input volume_level

  e_business: !input business_event
  e_science: !input science_event
  e_technology: !input technology_event
  e_world: !input world_event
  e_sports: !input sports_event

  _ai_task: !input ai_task_entity
  _ai_cat_enabled: !input enable_ai_categories
  _ai_roundup_enabled: !input enable_roundup_ai
  _ai_prompt_cat: !input ai_prompt_categories
  _ai_prompt_roundup: !input ai_prompt_roundup

  _roundup_enabled: !input enable_roundup_schedule

# ---------------------- ACTIONS ----------------------
action:
  - choose:
      # ---------------- Single-category branches ----------------
      - conditions:
          - condition: trigger
            id: business
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_business,'title') or states(e_business) or '') | trim %}
                {% set d = (state_attr(e_business,'description') or state_attr(e_business,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_cat_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      # Replace {{text}} placeholder inside the prompt
                      instructions: "{{ _ai_prompt_cat | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ raw_msg }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(raw_msg) }}"
            default:
              - variables:
                  final_msg: "{{ raw_msg }}"
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      - conditions:
          - condition: trigger
            id: science
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_science,'title') or states(e_science) or '') | trim %}
                {% set d = (state_attr(e_science,'description') or state_attr(e_science,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_cat_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: "{{ _ai_prompt_cat | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ raw_msg }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(raw_msg) }}"
            default:
              - variables:
                  final_msg: "{{ raw_msg }}"
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      - conditions:
          - condition: trigger
            id: technology
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_technology,'title') or states(e_technology) or '') | trim %}
                {% set d = (state_attr(e_technology,'description') or state_attr(e_technology,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_cat_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: "{{ _ai_prompt_cat | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ raw_msg }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(raw_msg) }}"
            default:
              - variables:
                  final_msg: "{{ raw_msg }}"
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      - conditions:
          - condition: trigger
            id: world
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_world,'title') or states(e_world) or '') | trim %}
                {% set d = (state_attr(e_world,'description') or state_attr(e_world,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_cat_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: "{{ _ai_prompt_cat | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ raw_msg }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(raw_msg) }}"
            default:
              - variables:
                  final_msg: "{{ raw_msg }}"
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      - conditions:
          - condition: trigger
            id: sports
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_sports,'title') or states(e_sports) or '') | trim %}
                {% set d = (state_attr(e_sports,'description') or state_attr(e_sports,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ')
                           | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_cat_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: "{{ _ai_prompt_cat | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ raw_msg }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(raw_msg) }}"
            default:
              - variables:
                  final_msg: "{{ raw_msg }}"
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      # ---------------- Scheduled Roundup (time_pattern) ----------------
      - conditions:
          - condition: trigger
            id: roundup_pattern
        sequence:
          # Only proceed if schedule toggle is ON
          - condition: template
            value_template: "{{ _roundup_enabled | bool }}"

          - variables:
              roundup_text: >-
                {% set lines = [] %}

                {% set e = e_business %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ') 
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In business today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {% set e = e_science %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ') 
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In science today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {% set e = e_sports %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ') 
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In sports today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {% set e = e_technology %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ') 
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In technology today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {% set e = e_world %}
                {% set t = (state_attr(e,'title') or states(e) or '') | trim %}
                {% if t %}
                  {% set d = (state_attr(e,'description') or state_attr(e,'content') or '') 
                               | striptags | replace('&nbsp;',' ') | replace('\n',' ') 
                               | replace('\r',' ') | replace('\t',' ') | trim %}
                  {% set lines = lines + ['In world news today: ' ~ t ~ ' — ' ~ d] %}
                {% endif %}

                {{ lines | join('\n') }}

          - condition: template
            value_template: "{{ roundup_text | trim != '' }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ _ai_roundup_enabled | bool }}"
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "summarize roundup"
                      entity_id: "{{ _ai_task }}"
                      instructions: "{{ _ai_prompt_roundup | replace('\"', '\"') }}"
                      inputs:
                        text: "{{ roundup_text }}"
                    response_variable: ai_out
                  - variables:
                      final_msg: "{{ ai_out.data | default(roundup_text) }}"
            default:
              - variables:
                  final_msg: "{{ roundup_text }}"

          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { is_volume_muted: false }
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data: { volume_level: "{{ _volume | float }}" }
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }
