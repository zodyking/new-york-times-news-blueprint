blueprint:
  name: "New York Times News — TTS per-speaker, pre-roll, AI optional"
  description: |
    ![New York Times News](https://github.com/zodyking/new-york-times-news-blueprint/blob/main/newyorktimes.png?raw=true)

    **What this does**
    - Speaks New York Times headlines for Business, Science, Health, Sports, Technology, and World.
    - Plays to your selected speakers **one at a time**, with a pre-roll delay and a set volume.
    - Auto-announces when each NYT category Event updates its `title`.
    - Optional **Roundup** on a **time pattern** schedule (hour pattern + minute-of-hour) with **active window** and **weekdays**.
    - Optional **AI rewrite** for single-category updates and/or the scheduled roundup using your AI Task.

    **How to integrate**
    1) Map each **NYT Event** entity (e.g., `event.nyt_business`) that exposes `title` plus `description`/`content` attributes.  
    2) Select your **TTS** entity (e.g., `tts.piper`) and your **speakers** (media players).  
    3) Set **Announcement volume**, **Pre-roll**, and **Voice** (if your TTS supports it).  
    4) To schedule the roundup, toggle **Enable Roundup Schedule** and choose the **hour pattern**, **minute**, **active window**, and **weekdays**.  
    5) To enable AI rewrites, toggle the options and edit the prompts (the blueprint appends the raw text automatically).

  domain: automation
  source_url: "https://github.com/zodyking/new-york-times-news-blueprint"

  input:
    # ---------- TTS / Speakers ----------
    tts_entity:
      name: "TTS Entity"
      description: "Select your TTS entity (e.g. tts.piper, tts.cloud)."
      selector:
        entity:
          domain: tts

    speakers:
      name: "Speakers (announce to, sequential)"
      description: "Media players to speak on, one-by-one, in the order listed."
      selector:
        entity:
          domain: media_player
          multiple: true

    preroll_ms:
      name: "TTS pre-roll (milliseconds)"
      description: "Delay before speaking on each speaker to let it wake, set volume, etc."
      default: 150
      selector:
        number:
          min: 0
          max: 3000
          step: 50
          unit_of_measurement: ms
          mode: slider

    volume_level:
      name: "Announcement volume"
      description: "Sets media player volume before each TTS (0.0–1.0)."
      default: 0.60
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    voice:
      name: "Voice (if supported by your TTS)"
      description: 'Voice ID (e.g., Piper "en_US-carlin-high"). Leave as-is if your TTS ignores it.'
      default: en_US-carlin-high
      selector:
        text: {}

    # ---------- NYT Event Entities ----------
    business_event:
      name: "Business event entity"
      description: 'NYT Business Event entity whose "title" changes on new items.'
      default: event.nyt_business
      selector:
        entity:
          domain: event

    science_event:
      name: "Science event entity"
      description: 'NYT Science Event entity whose "title" changes on new items.'
      default: event.nyt_science
      selector:
        entity:
          domain: event

    health_event:
      name: "Health event entity"
      description: 'NYT Health Event entity whose "title" changes on new items.'
      default: event.nyt_health
      selector:
        entity:
          domain: event

    technology_event:
      name: "Technology event entity"
      description: 'NYT Technology Event entity whose "title" changes on new items.'
      default: event.nyt_technology
      selector:
        entity:
          domain: event

    world_event:
      name: "World news event entity"
      description: 'NYT World News Event entity whose "title" changes on new items.'
      default: event.nyt_world_news
      selector:
        entity:
          domain: event

    sports_event:
      name: "Sports event entity (optional)"
      description: "Optional; if not available it will be skipped in roundups."
      default: event.nyt_sports
      selector:
        entity:
          domain: event

    # ---------- AI Task (shared) ----------
    ai_task_entity:
      name: "AI Task entity"
      description: "Example entity id (e.g. ai_task.google_ai_task_2)."
      default: ai_task.google_ai_task_2
      selector:
        entity:
          domain: ai_task

    # ---------- AI rewrite: per-category ----------
    enable_ai_categories:
      name: "Rewrite per-category updates with AI"
      description: "Toggle ON to send each single-category item to AI before speaking."
      default: false
      selector:
        boolean: {}

    ai_prompt_categories:
      name: "AI prompt for per-category updates"
      description: "Instructions sent to the AI Task when a single category updates."
      default: >
        Act as a concise, neutral news anchor speaking to one listener. Rewrite the line
        cleanly and keep it brief and factual. Use "!" as short pauses to improve TTS prosody.
        Do not add an intro or outro—return only the rewritten sentence.
      selector:
        text:
          multiline: true

    # ---------- AI rewrite: roundup ----------
    enable_roundup_ai:
      name: "Rewrite scheduled roundup with AI"
      description: "Toggle ON to send the compiled roundup to AI before speaking."
      default: true
      selector:
        boolean: {}

    ai_prompt_roundup:
      name: "AI prompt for roundup"
      description: "Instructions sent to the AI Task for scheduled roundups."
      default: >
        Summarize the roundup for one listener in a brisk, broadcast style. Organize into:
        Business, Science, Health, Sports, Technology, World. Begin each with “In [segment] today”.
        Use "!" as natural micro-pauses and between segments. Keep it tight, factual, and avoid
        intros/outros.
      selector:
        text:
          multiline: true

    # ---------- Scheduled Roundup (time_pattern + active window) ----------
    enable_roundup_schedule:
      name: "Enable Roundup Schedule"
      description: "Toggle ON to speak a roundup on the schedule below."
      default: false
      selector:
        boolean: {}

    roundup_pattern_hours:
      name: "Trigger — hour pattern"
      description: "When to run (hours)."
      default: "/1"
      selector:
        select:
          options:
            - label: "Every hour"
              value: "/1"
            - label: "Every 2 hours"
              value: "/2"
            - label: "Every 3 hours"
              value: "/3"
            - label: "Every 4 hours"
              value: "/4"
            - label: "Every 5 hours"
              value: "/5"
            - label: "Every 6 hours"
              value: "/6"

    roundup_pattern_minutes:
      name: "Trigger — minute of hour"
      description: "Minute within eligible hour."
      default: "3"
      selector:
        select:
          options:
            - "0"
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
            - "8"
            - "9"
            - "10"
            - "11"
            - "12"
            - "13"
            - "14"
            - "15"
            - "16"
            - "17"
            - "18"
            - "19"
            - "20"
            - "21"
            - "22"
            - "23"
            - "24"
            - "25"
            - "26"
            - "27"
            - "28"
            - "29"
            - "30"
            - "31"
            - "32"
            - "33"
            - "34"
            - "35"
            - "36"
            - "37"
            - "38"
            - "39"
            - "40"
            - "41"
            - "42"
            - "43"
            - "44"
            - "45"
            - "46"
            - "47"
            - "48"
            - "49"
            - "50"
            - "51"
            - "52"
            - "53"
            - "54"
            - "55"
            - "56"
            - "57"
            - "58"
            - "59"

    active_from_time:
      name: "Active from (time)"
      description: "Automation runs after this time and before Active until (local)."
      default: "09:00:00"
      selector:
        time: {}

    active_until_time:
      name: "Active until (time)"
      description: "Automation runs before this time (local). If earlier than Active from, window wraps past midnight."
      default: "22:00:00"
      selector:
        time: {}

    roundup_weekdays:
      name: "Weekdays"
      description: "Days of week to allow the scheduled roundup."
      default: ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
      selector:
        select:
          multiple: true
          options: ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]

mode: queued
max: 10

# ---------------------- TRIGGERS ----------------------
trigger:
  - platform: state
    entity_id: !input business_event
    attribute: title
    id: business
  - platform: state
    entity_id: !input science_event
    attribute: title
    id: science
  - platform: state
    entity_id: !input health_event
    attribute: title
    id: health
  - platform: state
    entity_id: !input technology_event
    attribute: title
    id: technology
  - platform: state
    entity_id: !input world_event
    attribute: title
    id: world
  - platform: state
    entity_id: !input sports_event
    attribute: title
    id: sports

  - platform: time_pattern
    hours: !input roundup_pattern_hours
    minutes: !input roundup_pattern_minutes
    seconds: "0"
    id: roundup_pattern

condition: []

# ---------------------- VARIABLES ----------------------
variables:
  _tts_entity: !input tts_entity
  _speakers: !input speakers
  _preroll_ms: !input preroll_ms
  _voice: !input voice
  _volume: !input volume_level

  e_business: !input business_event
  e_science: !input science_event
  e_health: !input health_event
  e_technology: !input technology_event
  e_world: !input world_event
  e_sports: !input sports_event

  _ai_task: !input ai_task_entity
  _ai_cat_enabled: !input enable_ai_categories
  _ai_roundup_enabled: !input enable_roundup_ai
  _ai_prompt_cat: !input ai_prompt_categories
  _ai_prompt_roundup: !input ai_prompt_roundup

  _roundup_enabled: !input enable_roundup_schedule
  _active_from: !input active_from_time
  _active_until: !input active_until_time
  _roundup_days: !input roundup_weekdays

# ---------------------- ACTIONS ----------------------
action:
  - choose:
      # --------- Business ---------
      - conditions: [{ condition: trigger, id: business }]
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_business,'title') or states(e_business) or '') | trim %}
                {% set d = (state_attr(e_business,'description') or state_attr(e_business,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ') | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions: [{ condition: template, value_template: "{{ _ai_cat_enabled | bool }}" }]
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: >-
                        {{ _ai_prompt_cat }}

                        TEXT: {{ raw_msg }}
                    response_variable: ai_out
                  - variables: { final_msg: "{{ ai_out.data | default(raw_msg) }}" }
            default:
              - variables: { final_msg: "{{ raw_msg }}" }
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      # --------- Science ---------
      - conditions: [{ condition: trigger, id: science }]
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_science,'title') or states(e_science) or '') | trim %}
                {% set d = (state_attr(e_science,'description') or state_attr(e_science,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ') | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions: [{ condition: template, value_template: "{{ _ai_cat_enabled | bool }}" }]
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: >-
                        {{ _ai_prompt_cat }}

                        TEXT: {{ raw_msg }}
                    response_variable: ai_out
                  - variables: { final_msg: "{{ ai_out.data | default(raw_msg) }}" }
            default:
              - variables: { final_msg: "{{ raw_msg }}" }
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      # --------- Health ---------
      - conditions: [{ condition: trigger, id: health }]
        sequence:
          - variables:
              raw_msg: >-
                {% set t = (state_attr(e_health,'title') or states(e_health) or '') | trim %}
                {% set d = (state_attr(e_health,'description') or state_attr(e_health,'content') or '') 
                           | striptags | replace('&nbsp;',' ') | replace('\n',' ') | replace('\r',' ') | replace('\t',' ') | trim %}
                {{ t }} — {{ d }}
          - choose:
              - conditions: [{ condition: template, value_template: "{{ _ai_cat_enabled | bool }}" }]
                sequence:
                  - action: ai_task.generate_data
                    metadata: {}
                    data:
                      task_name: "rewrite news item"
                      entity_id: "{{ _ai_task }}"
                      instructions: >-
                        {{ _ai_prompt_cat }}

                        TEXT: {{ raw_msg }}
                    response_variable: ai_out
                  - variables: { final_msg: "{{ ai_out.data | default(raw_msg) }}" }
            default:
              - variables: { final_msg: "{{ raw_msg }}" }
          - repeat:
              for_each: "{{ _speakers }}"
              sequence:
                - action: media_player.volume_mute
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    is_volume_muted: false
                - action: media_player.volume_set
                  target: { entity_id: "{{ repeat.item }}" }
                  data:
                    volume_level: "{{ _volume | float }}"
                - delay: { milliseconds: "{{ _preroll_ms | int }}" }
                - action: tts.speak
                  target: { entity_id: "{{ _tts_entity }}" }
                  data:
                    cache: false
                    media_player_entity_id: "{{ repeat.item }}"
                    message: "{{ final_msg }}"
                    options: { voice: "{{ _voice }}" }

      # --------- Technology ---------
      - conditions: [{ condition: trigger, id: techno]()
